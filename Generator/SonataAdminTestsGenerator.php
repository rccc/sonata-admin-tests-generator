<?php

namespace BVM\SonataAdminTestsGeneratorBundle\Generator;

use Sensio\Bundle\GeneratorBundle\Generator\Generator;

class SonataAdminTestsGenerator extends Generator
{
	/**
	 * @param  object $admin
	 * @return false | int
	 */
	public function generate($admin, $bundle)
	{

		$admin_name = $this->getAdminNameFromAdminCode($admin->getCode());

		$file_path = sprintf('%s/Tests/%sAdminTest.php',$bundle->getPath(), $admin_name);

		dump($file_path);

		$form_builder = $admin->getFormBuilder();

		// var_dump($builder->get('disponibility')->getAttributes()['data_collector/passed_options']['choices']);
		//var_dump($form_builder->get('vehicle_model')->getForm()->getConfig()->getOption('callback'));
		// var_dump($admin->getFormFieldDescription('disponibility'));
		

		$namespace = $this->getNamespace($admin);

		return $this->renderFile('AdminTests.php.twig', $file_path, array(
			'admin' 		=> $admin,
			'form_builder'  => $form_builder,
			'admin_name' 	=> $admin_name,
			'namespace' 	=> $namespace
		));
	}

	/**
	 * @param  string
	 * @return string
	 */
	protected function getAdminNameFromAdminCode($admin_code)
	{
			//base on default admin servive name generated by sonata:admin:generate

			$parts = explode('.', $admin_code);

			if(count($parts))
			{
				$name = strtoupper($parts[0]);

				if(strrpos('_', $parts[2]) !== 0)
				{
					$chunks = explode('_', $parts[2]);

					$name .=  implode('',array_map("ucfirst", $chunks));
				}
				else
				{
					$name .= ucfirst($parts[2]);
				}


				return $name;
			}
			else
			{
				throw new \Exception('Unable to generate admin name from admin code.');
			}

	}

	protected function getNamespace($admin)
	{
		$chunks = explode('\\', get_class($admin));

		$tmp = array_slice($chunks,0,count($chunks)-2);

		$namespace = sprintf('%s\Tests', implode('\\', $tmp));	

		return $namespace;
	}

}