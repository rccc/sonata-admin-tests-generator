<?php

{% set route_list = {} %}
{% for route in admin.routes.elements %}
    {% set name =  route.defaults._sonata_name %}
    {% set action = name|split('_')|last %}
    {% set route_list = route_list|merge({(action):(name)}) %}
{% endfor %}

namespace {{ namespace }};

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;


class {{ admin_name }}AdminTest extends WebTestCase
{
    private $domain;

    public function setUp()
    {

        global $argv;

        if(isset($argv[4])){
            $domain = $argv[4];                
        }
        elseif(defined('TESTS_DOMAIN'))
        {
            $domain = TESTS_DOMAIN;
        }
        else
        {
            throw new Exception('"domain" argument is mandatory');                
        }
            
        $this->domain = $domain;

    }

    {% if admin.hasRoute('list') %}

    public function testListIsSuccessfull()
    {

        $client = static::createClient(array(), array(
        'PHP_AUTH_USER' => 'eric.paya@bhcar.fr',
        'PHP_AUTH_PW'   => 'chuck',
        ));

        $client->enableProfiler();

        $container = $client->getContainer();

        $url = sprintf('%s%s', $this->domain, $container->get('router')->generate('{{ route_list["list"] }}'));

        $crawler = $client->request('GET',$url);

        $this->assertTrue($client->getResponse()->isSuccessful());
    }

    {% endif %}

    {% if admin.hasRoute('create') %}

    public function testCreateIsSuccessfull()
    {

        $client = static::createClient(array(), array(
        'PHP_AUTH_USER' => 'eric.paya@bhcar.fr',
        'PHP_AUTH_PW'   => 'chuck',
        ));

        $client->enableProfiler();

        $container = $client->getContainer();

        $url = sprintf('%s%s', $this->domain, $container->get('router')->generate('{{ route_list["create"] }}', array('uniqid' => 'test')));

        $crawler = $client->request('GET',$url);

        $this->assertTrue($client->getResponse()->isSuccessful());

        $form = $crawler->filter('form')->form();

        $this->assertTrue(count($form) === 1, 'Le formulaire de création est présent');

        {% for field_name, field_desc in admin.formFieldDescriptions %}
        $this->assertGreaterThan(0, $crawler->filter('[name="test[{{ field_name }}]"]')->count());
        {% endfor %}

        $array = array();

        $extract = $crawler
            ->filter('input[name="test[_token]"]')
            ->extract(array('value'))
        ;
        
        $array['_token'] = $extract[0];
        {% for field_name, field_desc in admin.formFieldDescriptions %}
            {% if field_desc.type == 'date' %}
                $array['{{ field_name }}'] =  array(
                    'day' => 1,
                    'month' => 1,
                    'year' => 2000
                );
            {% elseif field_desc.type == 'choice' %}
                {% set option = random(form_builder.get(field_name).form.config.option('choices')|keys) %}
                $array['{{ field_name }}'] = '{{ option }}'; 

            {% elseif field_desc.type == 'sonata_type_autocomplete' %}

                $array['{{ field_name }}'] =  'test';

            {% elseif field_desc.type == 'sonata_type_datepicker' %}
                $array['{{ field_name }}'] =  array(
                    'day' => 1,
                    'month' => 1,
                    'year' => 2000
                );
            {% elseif 'phone' in field_name|lower %}
                $array['{{ field_name }}'] = '0000000000';        
            {% elseif 'mobile' in field_name|lower %}
                $array['{{ field_name }}'] = '9999999999';        
            {% elseif 'mail' in field_name|lower %}
                $array['{{ field_name }}'] = 'test@test.net';        
            {% else %}
                $array['{{ field_name }}'] = 'test';        
            {% endif %}
        {% endfor %}

        $client->request(
            'POST',
            $url,
            array('test' => $array),
            array()
        );


        $this->assertTrue($container->get('session')->getFlashBag()->has('sonata_flash_success'));

        $crawler = $client->followRedirect();

        $this->assertTrue($client->getResponse()->isSuccessful());

        if ($profile = $client->getProfile()) 
        {

            if($profile->getCollector('form')->getData()['nb_errors'] > 0)
            {
                var_dump($profile->getCollector('form')->getData()['forms']['test']['errors']);
            }

            $this->assertEquals(0,$profile->getCollector('form')->getData()['nb_errors']);   
        }

        $id = $client->getRequest()->get('id');

        $this->assertTrue(null !== $id);

        return $id;
    }

    {% endif %}

    {% if admin.hasRoute('show') %}
    /**
     * @depends testCreateIsSuccessfull
     */
    public function testShowIsSuccessfull($id)
    {
        $client = static::createClient(array(), array(
        'PHP_AUTH_USER' => 'eric.paya@bhcar.fr',
        'PHP_AUTH_PW'   => 'chuck',
        ));

        $container = $client->getContainer();

        $url = sprintf('%s%s', $this->domain, $container->get('router')->generate('{{ route_list["show"] }}', array(
            'id' => $id, 
            'uniqid' => 'test'))
        );

        $crawler = $client->request('GET',$url);

        $this->assertTrue($client->getResponse()->isSuccessful());

        return $id;
    }

    {% endif %}
    {% if admin.hasRoute('edit') %}
    /**
     * @depends testShowIsSuccessfull
     */
    public function testEditIsSuccessfull($id)
    {

        $client = static::createClient(array(), array(
        'PHP_AUTH_USER' => 'eric.paya@bhcar.fr',
        'PHP_AUTH_PW'   => 'chuck',
        ));

        $container = $client->getContainer();

        $url = sprintf('%s%s', $this->domain, $container->get('router')->generate('{{ route_list["edit"] }}', array(
            'id' => $id, 
            'uniqid' => 'test'))
        );

        $crawler = $client->request('GET',$url);

        $this->assertTrue($client->getResponse()->isSuccessful());

        return $id;
    }     

    {% endif %}
    {% if admin.hasRoute('delete') %}
    /**
     * @depends testEditIsSuccessfull
     */
    public function testDeleteIsSuccessfull($id)
    {

        $client = static::createClient(array(), array(
        'PHP_AUTH_USER' => 'eric.paya@bhcar.fr',
        'PHP_AUTH_PW'   => 'chuck',
        ));

        $container = $client->getContainer();

        $url = sprintf('%s%s', $this->domain, $container->get('router')->generate('{{ route_list["delete"] }}', array(
            'id' => $id, 
            'uniqid' => 'test'))
        );

        $crawler = $client->request('GET',$url);

        $this->assertTrue($client->getResponse()->isSuccessful());

        $node = $crawler->filter('form')->first();

        $crawler = $client->submit($node->form());

        $this->assertTrue($container->get('session')->getFlashBag()->has('sonata_flash_success'));

        $crawler = $client->followRedirect();

        $this->assertTrue($client->getResponse()->isSuccessful());

    }     
    {% endif %}

}